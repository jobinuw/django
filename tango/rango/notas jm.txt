// Notas del video de django en youtube by microsoft

Patron MVC Modelo, vista , controlador

Un patron es un recipe para resolver un problema, No necesitan ser seguidos al pie de la Letra
Usalo donde creas que encaja y modificalo si no lo hace. 

// Model, es la DATA  (Base de Datos)



// View, es lo que el usuario va a ver, html js css  Representa el modelo. Craga la Data, Usa el ORM===, llama a la plantilla, 



//Controller es el que recibe lo que manda el usuario y hace el trabajo , gets the user request and get the job done!
En Django es URL Config. it figures out what the user wants /algo /noticias /nombres /porn etc
toma el request busca la data la procesa y la merge with the view


===ORM  object relational mapping le hablara a la BD por ti. middle layer. En vez de hacer la peticiones en sql directamente.



Scripts\activate

python manage.py makemigrations --name initial app

este comando crea un package dentro de la aplicacion llamado "migrations"
=========================================================================

C:\mypro1\tango>python manage.py makemigrations rango
C:\mypro1\tango
Migrations for 'rango':
  0001_initial.py:
    - Create model Album
    - Create model Artist
    - Add field artist to album

C:\mypro1\tango>
=========================================================================
// Errores 
// Errores 
C:\mypro1\tango>python manage.py makemigrations  initial app
C:\mypro1\tango
App 'app' could not be found. Is it in INSTALLED_APPS?
App 'initial' could not be found. Is it in INSTALLED_APPS?

C:\mypro1\tango>python manage.py makemigrations rango app
C:\mypro1\tango
App 'app' could not be found. Is it in INSTALLED_APPS?

C:\mypro1\tango>python manage.py makemigrations rango
C:\mypro1\tango
Migrations for 'rango':
  0001_initial.py:
    - Create model Album
    - Create model Artist
    - Add field artist to album

C:\mypro1\tango>

====================================================================================================

python manage.py sqlmigrate rango 0001   //  no se coloca el nombre completo  0001_initial.py

=====================================================================================================
C:\mypro1\tango
BEGIN;
CREATE TABLE "rango_album" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "na
me" varchar(50) NOT NULL);
CREATE TABLE "rango_artist" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "n
ame" varchar(50) NOT NULL, "year_formed" integer unsigned NOT NULL);
CREATE TABLE "rango_album__new" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT
, "name" varchar(50) NOT NULL, "artist_id" integer NOT NULL REFERENCES "rango_ar
tist" ("id"));
INSERT INTO "rango_album__new" ("id", "name") SELECT "id", "name" FROM "rango_al
bum";
DROP TABLE "rango_album";
ALTER TABLE "rango_album__new" RENAME TO "rango_album";
CREATE INDEX rango_album_ca949605 ON "rango_album" ("artist_id");

COMMIT;
=====================================================================

C:\mypro1\tango>python manage.py migrate
C:\mypro1\tango
Operations to perform:
  Apply all migrations: admin, rango, contenttypes, auth, sessions
Running migrations:
  Applying rango.0001_initial... OK

C:\mypro1\tango>

===================================================================

como crear una entrada en la BD aprovechando ya las clases creadas en models.py

newArtist=Artist(name="Great Big Sea",year_formed=1985)
newArtist.save()
allArtists = Artist.objects.all()
allArtists[0].name



=========================================================================

para interactuar con la base de datos debe hacerse desde la DJANGO SHELL::

$ python manage.py shell
C:\mypro1\tango>python manage.py shell


/////////////////////////////////////////////////////////////////////////////////


C:\mypro1\tango>python manage.py shell
C:\mypro1\tango
Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from rango.models import Artist
>>> in = Artist.objects.get(id=1)
  File "<console>", line 1
    in = Artist.objects.get(id=1)
     ^
SyntaxError: invalid syntax
>>> ind = Artist.objects.get(id=1)
>>> ind.name
u'Great Big Sea'
>>> nameArtist = Artist.objects.get(name="Great Big Sea")
>>> nameArtist.name
u'Great Big Sea'
>>> nameArtist.year_formed
1985
>>> nameArtist.id
1
>>>


>>> queryArtist = Artist.objects.filter(year_formed = 1985)
>>> for ar in queryArtist:
... print(ar.name)
  File "<console>", line 2
    print(ar.name)
        ^
IndentationError: expected an indented block
>>> for ar in queryArtist:
...   print(ar.name)
...
Great Big Sea
>>>
esta query filtra los q sean del ano y del pais funciona como un and


queryArtist = Artist.objects.filter(year_formed = 1985).exclude(country = "canada")


from rango.models import Album

>>> from rango.models import Artist
>>> from rango.models import Album
>>> artista1 = Artist(name = "ledvarela",year_formed=1966)
>>> artista1.save()
>>> artista2 = Artist(name = "anavcarela",year_formed=1996)
>>> artista2.save()
>>> Album(name ="Up", artist=artista1).save()
>>> Album(name ="7Up", artist=artista2).save()
Album(name ="Up1", artist=artista1).save()
Album(name ="8Up", artist=artista2).save()


///////

FOREIGN KEY QUERIES RELACIONA CADA ALBUM CON EL FOREIGN KEY ARTIST Q YA ESTA DEFINIDO EN MODELS.PY

SQLITEBROWSER.ORG DESCARGAR PARA PODER VISUALIZAR LAS TABLAS CREADAS EN LA DB


para que el foreign key funcione poner en la shell
import django
django.setup()

>>> albums = Album.objects.filter(artist__name="ledvarela")
>>> for album in albums:
...    print(album.name)
...
Up
Up1

////////////////////////////////////////////////////


>>> albumes = Album.objects.filter(artist__name="anavcarela")
>>> for album in albumes:
...    print(album.name)
...
7Up
8Up


============================================================================================================================================
============================================================================================================================================
============================================================================================================================================
ROUTING URL-S MATCHING PATTERN    HORA 2 A 3 DEL VIDEO
============================================================================================================================================
============================================================================================================================================


USING TEMPLATES
ENSURING CONSISTENCY
FORMS          


TEMA A PARTIR DE LA HORA 3.

 
newArtist=Artist(name="Great Big Sea",year_formed=1985)
newArtist.save()
allArtists = Artist.objects.all()
allArtists[0].name



//////////////////////////////////////////////////////////////

EN la view yo declaro una class artist, cuando en se pide en la url /rango/artist
se despacha esta view, dentro de esta se hace una consulta a la base de datos
y dentro de la plantilla se hace referencia a esta lista de objetos traidas de la BD
o sea en la plantilla se muestran los datos traidos a traves de la view hacia el cliente que 
quiere visualizar algo.

Es decir que con las templates o plantillas django se encarga de inyectar
codigo html en la pagina para q posteriormente sea vista por el user.


/////////////////////////////////////////////////////////////////////////////



FORMS


